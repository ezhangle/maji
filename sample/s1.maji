#load "s2.maji";

greeting :: "hello, world!\n";
success :: "success!\n";
failure :: "fail!\n";
ending :: "end..\n";

pos: vec2;
y := backing_type.NON_RETAINED;
x := my_counter == 10 ? 3+4 : 4-4;
my_counter := 10;

backing_type :: enum {
    NON_RETAINED,
    RETAINED = 0b111,
    BUFFERED
}

bar :: (n: int) -> int {
    return n + 1;
}

test_forever_break :: () {
    for (;;) {
        printf(greeting);
        if (++x > 9) {
            break;
        }
    }
}

test_for :: (n: int) {
    for (i := 0; i < n; ++i) {
        printf(greeting);
    }
}

test_for_ptr :: (n: int*) {
    for (i := 0; i < *n; ++i) {
        printf(greeting);
    }
    *n = 0;
}

test_for_ptr_c :: (i: int, n: int*) {
    for (;i < *n; ++i) {
        printf(greeting);
    }
    *n = 0;
}

main :: () -> int {
    pos.x = 2;
    pos.y = 7;

    pptr := &pos;
    (*pptr).y = 2;

    xx: int = 5;
    pos.z = &xx;

    *pos.z = 100;
    pos.y = *pos.z;

    ppp := &pos.z;
    **ppp = 50;

    pos.y = *pos.z;

    y = backing_type.RETAINED;

    a := my_counter;
    b := &a;
    *b = 0;
    my_counter = a;

    test_forever_break();

    if (y == backing_type.RETAINED) {
        printf(success);
    } else if (y == backing_type.BUFFERED) {
        printf(greeting);
    } else {
        printf(failure);
    }

    printf(ending);

    /*
    c := 2;
    test_for_ptr(&c);
    test_for(c);
    */

    *pos.z = 1;
    // test_for(*pos.z);
    // test_for(xx);
    test_for_ptr(&xx);
    xx = 8;
    test_for_ptr_c(7, pos.z);

    return xx;
    return pos.x + pos.y;
}

vec2 :: struct {
    x: int;
    y: int;
    z: int*;
}
