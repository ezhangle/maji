//
// general functions from libc
//

usleep :: (n: int) #foreign "/usr/lib/libc.dylib";
sleep :: (n: int) #foreign "/usr/lib/libc.dylib";
printf :: (format: char*, args: var_args) -> int #foreign "/usr/lib/libc.dylib";
malloc :: (size: int) -> void* #foreign "/usr/lib/libc.dylib";
free :: (ptr: void*) #foreign "/usr/lib/libc.dylib";

//
// cgswindow.maji
//

CGSMainConnectionID :: () -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSNewWindow :: (cid: int, type: backing_type, x: f64, y: f64, region: void*, wid: int*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSNewRegionWithRect :: (rect: cg_rect*, region: void**) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSReleaseWindow :: (cid: int, wid: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSAddDragRegion :: (cid: int, wid: int, region: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSAddActivationRegion :: (cid: int, wid: int, region: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSOrderWindow :: (cid: int, wid: int, mode: ordering_mode, rel_wid: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSSetWindowLevel :: (cid: int, wid: int, window_level: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSSetWindowOpacity :: (cid: int, wid: int, opaque: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGWindowLevelForKey :: (level: window_level) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGWindowContextCreate :: (cid: int, wid: int, options: void*) -> void* #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGContextClearRect :: (context: void*, rect: cg_rect) #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGContextRelease :: (context: void*) #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";

GetCurrentProcess :: (psn: proc_serial_number*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
SetFrontProcess :: (psn: proc_serial_number*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
TransformProcessType :: (psn: proc_serial_number*, type: process_type) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";

GetEventDispatcherTarget :: () -> void* #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
SendEventToEventTarget :: (event: void*, event_target: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
ReceiveNextEvent :: (num_types: int, typespec: void*, wait: f64, pull_event: s8, event: void**) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
AEProcessEvent :: (event: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
ReleaseEvent :: (event: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
GetEventClass :: (event: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
GetEventKind :: (event: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
GetEventParameter :: (event: void*, name: int, type: int, out_type: int*, in_size: int, out_size: int*, out_data: void*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";

//
// cgl.maji
//

CGSAddSurface :: (cid: int, wid: int, surface_id: int*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSSetSurfaceBounds :: (cid: int, wid: int, surface_id: int, rect: cg_rect2) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSOrderSurface :: (cid: int, wid: int, surface_id: int, one: int, zero: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSRemoveSurface :: (cid: int, wid: int, surface_id: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";

CGLChoosePixelFormat :: (attributes: cgl_pixelformat_attribute*, pixelformat: void*, num: int*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLDestroyPixelFormat :: (pixelformat: void*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLCreateContext :: (pixelformat: void*, share: void*, ctx: void*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLDestroyContext :: (ctx: void*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLSetCurrentContext :: (ctx: void*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLGetCurrentContext :: () -> void* #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLFlushDrawable :: (ctx: void*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLSetParameter :: (ctx: void*, param: cgl_context_parameter, params: int*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLGetParameter :: (ctx: void*, param: cgl_context_parameter, params: int*) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
CGLSetSurface :: (ctx: void*, cid: int, wid: int, surface_id: int) -> int #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";

cgl_pixelformat_attribute :: enum {
    ALL_RENDERERS                         ::   1; /* choose from all available renderers          */
    TRIPLE_BUFFER                         ::   3; /* choose a triple buffered pixel format        */
    DOUBLE_BUFFER                         ::   5; /* choose a double buffered pixel format        */
    COLOR_SIZE                            ::   8; /* number of color buffer bits                  */
    ALPHA_SIZE                            ::  11; /* number of alpha component bits               */
    DEPTH_SIZE                            ::  12; /* number of depth buffer bits                  */
    STENCIL_SIZE                          ::  13; /* number of stencil buffer bits                */
    MINIMUM_POLICY                        ::  51; /* never choose smaller buffers than requested  */
    MAXIMUM_POLICY                        ::  52; /* choose largest buffers of type requested     */
    SAMPLE_BUFFERS                        ::  55; /* number of multi sample buffers               */
    SAMPLES                               ::  56; /* number of samples per multi sample buffer    */
    COLOR_FLOAT                           ::  58; /* color buffers store floating point pixels    */
    MULTI_SAMPLE                          ::  59; /* choose multisampling                         */
    SUPER_SAMPLE                          ::  60; /* choose supersampling                         */
    SAMPLE_ALPHA                          ::  61; /* request alpha filtering                      */
    RENDERER_ID                           ::  70; /* request renderer by ID                       */
    NO_RECOVERY                           ::  72; /* disable all failure recovery systems         */
    ACCELERATED                           ::  73; /* choose a hardware accelerated renderer       */
    CLOSEST_POLICY                        ::  74; /* choose the closest color buffer to request   */
    BACKING_STORE                         ::  76; /* back buffer contents are valid after swap    */
    BACKING_VOLATILE                      ::  77; /* back buffer contents are volatile after swap */
    DISPLAY_MASK                          ::  84; /* mask limiting supported displays             */
    ALLOW_OFFLINE_RENDERERS               ::  96; /* show offline renderers in pixel formats      */
    ACCELERATED_COMPUTE                   ::  97; /* choose a hardware accelerated compute device */
    OPENGL_PROFILE                        ::  99; /* specify an OpenGL Profile to use             */
    SUPPORTS_AUTOMATIC_GRAPHICS_SWITCHING :: 101; /* responds to display changes                  */
    VIRTUAL_SCREEN_COUNT                  :: 128; /* number of virtual screens in this format     */

    /* NOTE: the following attributes are deprecated in Core Profile */
    AUX_BUFFERS       ::   7; /* number of aux buffers */
    ACCUM_SIZE        ::  14; /* number of accum buffer bits */
    AUX_DEPTH_STENCIL ::  57; /* each aux buffer has its own depth stencil */
    STEREO            ::   6;
    OFF_SCREEN        ::  53;
    WINDOW            ::  80;
    COMPLIANT         ::  83;
    PBUFFER           ::  90;
    REMOTE_PBUFFER    ::  91;
    SINGLE_RENDERER   ::  71;
    ROBUST            ::  75;
    MPSAFE            ::  78;
    MULTI_SCREEN      ::  81;
    FULL_SCREEN       ::  54;
}

cgl_context_parameter :: enum {
    SWAP_RECTANGLE                          :: 200; /* 4 params. Set or get the swap rectangle {x, y, w, h}             */
    SWAP_INTERVAL                           :: 222; /* 1 param.  0 -> Don't sync, 1 -> Sync to vertical retrace         */
    DISPATCH_TABLE_SIZE                     :: 224; /* 1 param.  Get the dispatch table size                            */
    /* Note: kCGLCPClientStorage is always a pointer-sized parameter, even though the API claims GLint.                 */
    CLIENT_STORAGE                          :: 226; /* 1 param.  Context specific generic storage                       */
    SURFACE_TEXTURE                         :: 228; /* 3 params. Context, target, internal_format                       */
    /*  USED BY AGL                                                                                                     */
    /*  AGL_STATE_VALIDATION                   230                                                                      */
    /*  AGL_BUFFER_NAME                        231                                                                      */
    /*  AGL_ORDER_CONTEXT_TO_FRONT             232                                                                      */
    /*  AGL_CONTEXT_SURFACE_ID                 233                                                                      */
    /*  AGL_CONTEXT_DISPLAY_ID                 234                                                                      */
    SURFACE_ORDER                           :: 235; /* 1 param.  1 -> Above window, -1 -> Below Window                  */
    SURFACE_OPACITY                         :: 236; /* 1 param.  1 -> Surface is opaque (default), 0 -> non-opaque      */
    /*  USED BY AGL                                                                                                     */
    /*  AGL_CLIP_REGION                        254                                                                      */
    /*  AGL_FS_CAPTURE_SINGLE                  255                                                                      */
    SURFACE_BACKING_SIZE                    :: 304; /* 2 params. Width/height of surface backing size                   */
    /*  AGL_SURFACE_VOLATILE                   306                                                                      */
    SURFACE_SURFACE_VOLATILE                :: 306; /* 1 param.  Surface volatile state                                 */
    RECLAIM_RESOURCES                       :: 308; /* 0 params.                                                        */
    CURRENT_RENDERER_ID                     :: 309; /* 1 param.  Retrieves the current renderer ID                      */
    GPU_VERTEX_PROCESSING                   :: 310; /* 1 param.  Currently processing vertices with GPU (get)           */
    GPU_FRAGMENT_PROCESSING                 :: 311; /* 1 param.  Currently processing fragments with GPU (get)          */
    HAS_DRAWABLE                            :: 314; /* 1 param.  Boolean returned if drawable is attached			    */
    MP_SWAPS_IN_FLIGHT                      :: 315; /* 1 param.  Max number of swaps queued by the MP GL engine	        */
    GPU_RESTART_STATUS                      :: 317; /* 1 param.  Retrieves and clears the current CGLGPURestartStatus   */
    ABORT_ON_GPU_RESTART_STATUS_BLACKLISTED :: 318; /* 1 param.  Establish action to take upon blacklisting             */
    SUPPORT_GPU_RESTART                     :: 319; /* 1 param.  Does driver support auto-restart of GPU on hang/crash? */
    SUPPORT_SEPARATE_ADDRESS_SPACE          :: 320; /* 1 param.  Does context get its own GPU address space?            */
    CONTEXT_PRIORITY_REQUEST                :: 608; /* 1 param.  kCGLCPContextPriorityRequest[High|Normal|Low] 0|1|2    */
}

cgl_opengl_profile :: enum {
    VERSION_LEGACY   :: 0x1000; /* choose a renderer compatible with GL1.0       */
    VERSION_3_2_CORE :: 0x3200; /* choose a renderer capable of GL3.2 or later   */
    VERSION_GL3_CORE :: 0x3200; /* choose a renderer capable of GL3.2 or later   */
    VERSION_GL4_CORE :: 0x4100; /* choose a renderer capable of GL4.1 or later   */
}

glBegin :: (mode: gl_begin_mode) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glEnd :: () #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glLoadIdentity :: () #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glMatrixMode :: (mode: gl_matrix_mode) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";

glClear :: (mask: int) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glClearColor :: (red: float, green: float, blue: float, alpha: float) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glRotatef :: (angle: float, x: float, y: float, z: float) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glVertex2f :: (x: float, y: float) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";
glColor4f :: (red: float, green: float, blue: float, alpha: float) #foreign "/System/Library/Frameworks/OpenGL.framework/OpenGL";

gl_begin_mode :: enum {
    POINTS         :: 0x0000;
    LINES          :: 0x0001;
    LINE_LOOP      :: 0x0002;
    LINE_STRIP     :: 0x0003;
    TRIANGLES      :: 0x0004;
    TRIANGLE_STRIP :: 0x0005;
    TRIANGLE_FAN   :: 0x0006;
    QUADS          :: 0x0007;
    QUAD_STRIP     :: 0x0008;
    POLYGON        :: 0x0009;
}

gl_matrix_mode :: enum {
    MODELVIEW  :: 0x1700;
    PROJECTION :: 0x1701;
    TEXTURE    :: 0x1702;
}

noErr :: 0;
kEventDurationNoWait :: 0.0;

kEventClassMouse       :: 1836021107;
kEventClassKeyboard    :: 1801812322;
kEventClassApplication :: 1634758764;
kEventClassAppleEvent  :: 1701867619;

kEventParamKeyCode         :: 1801678692;
kEventParamKeyMacCharCodes :: 1801676914;
kEventParamKeyModifiers    :: 1802334052;

kEventParamMouseButton   :: 1835168878;
kEventParamMouseLocation :: 1835822947;
kEventParamMouseDelta    :: 1835299937;

typeUInt32 :: 1835100014;
typeChar   :: 1413830740;

typeMouseButton :: 1835168878;
typeHIPoint     :: 1751740532;

kEventRawKeyDown   :: 1;
kEventRawKeyRepeat :: 2;
kEventRawKeyUp     :: 3;

kEventMouseDown    :: 1;
kEventMouseUp      :: 2;
kEventMouseMoved   :: 5;
kEventMouseDragged :: 6;

kEventMouseButtonPrimary   :: 1;
kEventMouseButtonSecondary :: 2;
kEventMouseButtonTertiary  :: 3;

virtual_key :: enum {
    ANSI_A                    :: 0x00;
    ANSI_S                    :: 0x01;
    ANSI_D                    :: 0x02;
    ANSI_F                    :: 0x03;
    ANSI_H                    :: 0x04;
    ANSI_G                    :: 0x05;
    ANSI_Z                    :: 0x06;
    ANSI_X                    :: 0x07;
    ANSI_C                    :: 0x08;
    ANSI_V                    :: 0x09;
    ANSI_B                    :: 0x0B;
    ANSI_Q                    :: 0x0C;
    ANSI_W                    :: 0x0D;
    ANSI_E                    :: 0x0E;
    ANSI_R                    :: 0x0F;
    ANSI_Y                    :: 0x10;
    ANSI_T                    :: 0x11;
    ANSI_1                    :: 0x12;
    ANSI_2                    :: 0x13;
    ANSI_3                    :: 0x14;
    ANSI_4                    :: 0x15;
    ANSI_6                    :: 0x16;
    ANSI_5                    :: 0x17;
    ANSI_EQUAL                :: 0x18;
    ANSI_9                    :: 0x19;
    ANSI_7                    :: 0x1A;
    ANSI_MINUS                :: 0x1B;
    ANSI_8                    :: 0x1C;
    ANSI_0                    :: 0x1D;
    ANSI_RIGHT_BRACKET        :: 0x1E;
    ANSI_O                    :: 0x1F;
    ANSI_U                    :: 0x20;
    ANSI_LEFT_BRACKET         :: 0x21;
    ANSI_I                    :: 0x22;
    ANSI_P                    :: 0x23;
    ANSI_L                    :: 0x25;
    ANSI_J                    :: 0x26;
    ANSI_QUOTE                :: 0x27;
    ANSI_K                    :: 0x28;
    ANSI_SEMICOLON            :: 0x29;
    ANSI_BACKSLASH            :: 0x2A;
    ANSI_COMMA                :: 0x2B;
    ANSI_SLASH                :: 0x2C;
    ANSI_N                    :: 0x2D;
    ANSI_M                    :: 0x2E;
    ANSI_PERIOD               :: 0x2F;
    ANSI_GRAVE                :: 0x32;
    ANSI_KEYPAD_DECIMAL       :: 0x41;
    ANSI_KEYPAD_MULTIPLY      :: 0x43;
    ANSI_KEYPAD_PLUS          :: 0x45;
    ANSI_KEYPAD_CLEAR         :: 0x47;
    ANSI_KEYPAD_DIVIDE        :: 0x4B;
    ANSI_KEYPAD_ENTER         :: 0x4C;
    ANSI_KEYPAD_MINUS         :: 0x4E;
    ANSI_KEYPAD_EQUALS        :: 0x51;
    ANSI_KEYPAD0              :: 0x52;
    ANSI_KEYPAD1              :: 0x53;
    ANSI_KEYPAD2              :: 0x54;
    ANSI_KEYPAD3              :: 0x55;
    ANSI_KEYPAD4              :: 0x56;
    ANSI_KEYPAD5              :: 0x57;
    ANSI_KEYPAD6              :: 0x58;
    ANSI_KEYPAD7              :: 0x59;
    ANSI_KEYPAD8              :: 0x5B;
    ANSI_KEYPAD9              :: 0x5C;
    RETURN                    :: 0x24;
    TAB                       :: 0x30;
    SPACE                     :: 0x31;
    DELETE                    :: 0x33;
    ESCAPE                    :: 0x35;
    COMMAND                   :: 0x37;
    SHIFT                     :: 0x38;
    CAPSLOCK                  :: 0x39;
    OPTION                    :: 0x3A;
    CONTROL                   :: 0x3B;
    RIGHT_COMMAND             :: 0x36;
    RIGHT_SHIFT               :: 0x3C;
    RIGHT_OPTION              :: 0x3D;
    RIGHT_CONTROL             :: 0x3E;
    FUNCTION                  :: 0x3F;
    F17                       :: 0x40;
    VOLUME_UP                 :: 0x48;
    VOLUME_DOWN               :: 0x49;
    MUTE                      :: 0x4A;
    F18                       :: 0x4F;
    F19                       :: 0x50;
    F20                       :: 0x5A;
    F5                        :: 0x60;
    F6                        :: 0x61;
    F7                        :: 0x62;
    F3                        :: 0x63;
    F8                        :: 0x64;
    F9                        :: 0x65;
    F11                       :: 0x67;
    F13                       :: 0x69;
    F16                       :: 0x6A;
    F14                       :: 0x6B;
    F10                       :: 0x6D;
    F12                       :: 0x6F;
    F15                       :: 0x71;
    HELP                      :: 0x72;
    HOME                      :: 0x73;
    PAGE_UP                   :: 0x74;
    FORWARD_DELETE            :: 0x75;
    F4                        :: 0x76;
    END                       :: 0x77;
    F2                        :: 0x78;
    PAGE_DOWN                 :: 0x79;
    F1                        :: 0x7A;
    LEFT_ARROW                :: 0x7B;
    RIGHT_ARROW               :: 0x7C;
    DOWN_ARROW                :: 0x7D;
    UP_ARROW                  :: 0x7E;
}

backing_type :: enum {
    NON_RETAINED :: 0;
    RETAINED     :: 1;
    BUFFERED     :: 2;
}

ordering_mode :: enum {
    ABOVE ::  1;
    BELOW :: -1;
    OUT   ::  0;
}

process_type :: enum {
    FOREGROUND :: 1;
    BACKGROUND :: 2;
    UIELEMENT  :: 4;
}

window_level :: enum {
    BASE                ::  0;
    MINIMUM             ::  1;
    DESKTOP             ::  2;
    BACKSTOP_MENU       ::  3;
    NORMAL              ::  4;
    FLOATING            ::  5;
    TORN_OFF_MENU       ::  6;
    DOCK                ::  7;
    MAIN_MENU           ::  8;
    STATUS              ::  9;
    MODAL_PANEL         :: 10;
    POPUP_MENU          :: 11;
    DRAGGING            :: 12;
    SCREENSAVER         :: 13;
    MAXIMUM             :: 14;
    OVERLAY             :: 15;
    HELP                :: 16;
    UTILITY             :: 17;
    DESKTOP_ICON        :: 18;
    CURSOR              :: 19;
    ASSISTIVE_TECH_HIGH :: 20;
}

cgl_window :: struct {
    id: int;
    connection: int;
    psn: proc_serial_number;
    rect: cg_rect;
    region: void*;
    surface: int;
    context: void *;
    v_sync: int;
}

cg_rect :: struct {
    origin: cg_point;
    size: cg_size;
}

cg_rect2 :: struct {
    x: f64;
    y: f64;
    w: f64;
    h: f64;
}

cg_point :: struct {
    x: f64;
    y: f64;
}

cg_size :: struct {
    width: f64;
    height: f64;
}

proc_serial_number :: struct {
    high_long: int;
    low_long: int;
}

make_rect2 :: (x: f64, y: f64, w: f64, h: f64) -> cg_rect2 {
    rect: cg_rect2;
    rect.x = x;
    rect.y = y;
    rect.w = w;
    rect.h = h;
    return rect;
}

make_rect :: (x: f64, y: f64, w: f64, h: f64) -> cg_rect {
    rect: cg_rect;
    rect.origin.x = x;
    rect.origin.y = y;
    rect.size.width = w;
    rect.size.height = h;
    return rect;
}

cgl_window_surface_init :: (win: cgl_window *) {
    surface_opacity := 0;
    CGLSetParameter(win.context, cgl_context_parameter.SURFACE_OPACITY, &surface_opacity);
    CGSAddSurface(win.connection, win.id, &win.surface);

    // printf("SETTING BOUNDS FOR CGL SURFACE: %d\n", win.surface);
    rect := make_rect2(0.0, 0.0, win.rect.size.width, win.rect.size.height);
    CGSSetSurfaceBounds(win.connection, win.id, win.surface, rect);

    CGSOrderSurface(win.connection, win.id, win.surface, 1, 0);
    CGLSetSurface(win.context, win.connection, win.id, win.surface);
}

cgl_window_context_init :: (win: cgl_window *) {
    pixelformat: void *;
    drawable: int;
    num: int;

    attributes: cgl_pixelformat_attribute[5];
    attributes[0] = cgl_pixelformat_attribute.DOUBLE_BUFFER;
    attributes[1] = cgl_pixelformat_attribute.ACCELERATED;
    attributes[2] = cgl_pixelformat_attribute.OPENGL_PROFILE;
    attributes[3] = cgl_opengl_profile.VERSION_LEGACY;
    attributes[4] = 0;

    CGLChoosePixelFormat(attributes, &pixelformat, &num);

    CGLCreateContext(pixelformat, null, &win.context);
    CGLSetParameter(win.context, cgl_context_parameter.SWAP_INTERVAL, &win.v_sync);

    cgl_window_surface_init(win);

    CGLGetParameter(win.context, cgl_context_parameter.HAS_DRAWABLE, &drawable);

    CGLDestroyPixelFormat(pixelformat);
}

cgl_window_init :: (win: cgl_window *) {
    GetCurrentProcess(&win.psn);

    win.connection = CGSMainConnectionID();

    win.rect = make_rect(200.0, 200.0, 500.0, 500.0);
    CGSNewRegionWithRect(&win.rect, &win.region);
    CGSNewWindow(win.connection, backing_type.BUFFERED, win.rect.origin.x, win.rect.origin.y, win.region, &win.id);

    CGSAddActivationRegion(win.connection, win.id, win.region);

    CGSSetWindowOpacity(win.connection, win.id, 0);
    CGSSetWindowLevel(win.connection, win.id, CGWindowLevelForKey(window_level.NORMAL));

    TransformProcessType(&win.psn, process_type.FOREGROUND);
    cgl_window_bring_to_front(win);

    /*
    context := CGWindowContextCreate(win.connection, win.id, null);
    printf("CLEAR CONTEXT: %p\n", context);
    CGContextClearRect(context, win.rect);
    CGContextRelease(context);
    */

    cgl_window_context_init(win);
}

cgl_window_destroy :: (win: cgl_window *) {
    CGLDestroyContext(win.context);
    CGSReleaseWindow(win.connection, win.id);
}

cgl_window_bring_to_front :: (win: cgl_window *) {
    CGSOrderWindow(win.connection, win.id, ordering_mode.ABOVE, 0);
    SetFrontProcess(&win.psn);
}

cgl_window_make_current :: (win: cgl_window *) {
    CGLSetCurrentContext(win.context);
}

cgl_window_flush :: (win: cgl_window *) {
    CGLFlushDrawable(win.context);
}

cgl_window_add_drag_region :: (win: cgl_window *, x: f64, y: f64, width: f64, height: f64) {
    region: void*;
    rect: cg_rect;
    rect.origin.x = x;
    rect.origin.y = y;
    rect.size.width = width;
    rect.size.height = height;
    CGSNewRegionWithRect(&rect, &region);
    CGSAddDragRegion(win.connection, win.id, region);
}

key_handler :: (event: void *) {
    event_kind := GetEventKind(event);
    if ((event_kind == kEventRawKeyDown) ||
        (event_kind == kEventRawKeyRepeat) ||
        (event_kind == kEventRawKeyUp)) {
        keycode: s32 = 0;
        charcode: char = '0';
        modifiers: s32 = 0;

        GetEventParameter(event, kEventParamKeyCode, typeUInt32, null, size_of(s32), null, &keycode);
        GetEventParameter(event, kEventParamKeyMacCharCodes, typeChar, null, size_of(s8), null, &charcode);
        GetEventParameter(event, kEventParamKeyModifiers, typeUInt32, null, size_of(s32), null, &modifiers);

        printf("modifiers = %08x, keycode = %d, charcode = %c\n", modifiers, keycode, charcode);

        if (event_kind == kEventRawKeyDown && keycode == virtual_key.ANSI_Q) {
            should_quit = 1;
        }
    }
}

mouse_handler :: (event: void *) {
    event_kind := GetEventKind(event);
    if ((event_kind == kEventMouseDown) ||
        (event_kind == kEventMouseUp) ||
        (event_kind == kEventMouseDragged) ||
        (event_kind == kEventMouseMoved)) {
        button: s16 = 0;
        modifiers: int = 0;
        location: cg_point;
        delta: cg_point;

        GetEventParameter(event, kEventParamMouseButton, typeMouseButton, null, size_of(s16), null, &button);
        GetEventParameter(event, kEventParamKeyModifiers, typeUInt32, null, size_of(s32), null, &modifiers);
        GetEventParameter(event, kEventParamMouseLocation, typeHIPoint, null, size_of(cg_point), null, &location);
        GetEventParameter(event, kEventParamMouseDelta, typeHIPoint, null, size_of(cg_point), null, &delta);

        printf("modifiers = %08x, button = %d, loc.x = %.2f, loc.y = %.2f\n", modifiers, button, location.x, location.y);
    }
}

should_quit := 0;

GL_COLOR_BUFFER_BIT :: 0x00004000;

main :: () -> int {
    win: cgl_window;
    cgl_window_init(&win);
    cgl_window_add_drag_region(&win, 0.0, 0.0, win.rect.size.width, win.rect.size.height);
    cgl_window_make_current(&win);

    angle := cast(float)0.0;

    while (!should_quit) {
        event := null;
        event_target := GetEventDispatcherTarget();
        while (ReceiveNextEvent(0, null, kEventDurationNoWait, cast(s8) 1, &event) == noErr) {
            event_class := GetEventClass(event);

            if (event_class == kEventClassKeyboard) {
                key_handler(event);
            } else if (event_class == kEventClassMouse) {
                mouse_handler(event);
            } else if (event_class == kEventClassAppleEvent) {
                AEProcessEvent(event);
            }

            SendEventToEventTarget(event, event_target);
            ReleaseEvent(event);
        }

        glClearColor(cast(float)0.0, cast(float)0.0, cast(float)0.0, cast(float)1.0);
        glClear(cast(int)GL_COLOR_BUFFER_BIT);

        glMatrixMode(gl_matrix_mode.PROJECTION);
        glLoadIdentity();
        glMatrixMode(gl_matrix_mode.MODELVIEW);
        glLoadIdentity();

        angle = angle + cast(float)0.001;
        if (cast(int)(angle > cast(float)1.5)) {
            angle = cast(float)0.0;
        }

        printf("ANGLE = %.4f\n", cast(f64)angle);
        glRotatef(angle * cast(float)1000.0, cast(float)0.0, cast(float)0.0, cast(float)1.0);

        glBegin(gl_begin_mode.QUADS);
        glColor4f(cast(float)1.0, cast(float)1.0, cast(float)0.0, cast(float)1.0);
        glVertex2f(cast(float)0.25, cast(float)0.25);
        glVertex2f(cast(float)0.75, cast(float)0.25);
        glVertex2f(cast(float)0.75, cast(float)0.75);
        glVertex2f(cast(float)0.25, cast(float)0.75);
        glEnd();

        cgl_window_flush(&win);
    }

    cgl_window_destroy(&win);
    return 0;
}
