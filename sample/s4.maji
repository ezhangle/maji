CGSMainConnectionID :: () -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSNewWindow :: (cid: int, type: backing_type, x: float, y: float, region: void*, wid: int*) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSNewRegionWithRect :: (rect: cg_rect*, region: void**) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";
CGSOrderWindow :: (cid: int, wid: int, mode: ordering_mode, rel_wid: int) -> int #foreign "/System/Library/Frameworks/Carbon.framework/Carbon";

sleep :: (n: int) #foreign "/usr/lib/libc.dylib";
printf :: (format: char*, n: int, p: void*) -> int #foreign "/usr/lib/libc.dylib";
malloc :: (n: int) -> int* #foreign "/usr/lib/libc.dylib";

backing_type :: enum {
    NON_RETAINED = 0,
    RETAINED     = 1,
    BUFFERED     = 2
}

ordering_mode :: enum {
    ORDER_ABOVE =  1,
    ORDER_BELOW = -1,
    ORDER_OUT   =  0
}

cgl_window :: struct {
    id: int;
    connection: int;
    rect: cg_rect;
    region: void*;
}

cg_rect :: struct {
    origin: cg_point;
    size: cg_size;
}

cg_point :: struct {
    x: f64;
    y: f64;
}

cg_size :: struct {
    width: f64;
    height: f64;
}

cgl_window_init :: (win: cgl_window*) {
    win.connection = CGSMainConnectionID();

    win.rect.origin.x = 20.0;
    win.rect.origin.y = 20.0;
    win.rect.size.width = 300.0;
    win.rect.size.height = 200.0;

    CGSNewRegionWithRect(&win.rect, &win.region);
    CGSNewWindow(win.connection, backing_type.BUFFERED, (float)win.rect.origin.x, (float)win.rect.origin.y, win.region, &win.id);
    CGSOrderWindow(win.connection, win.id, ordering_mode.ORDER_ABOVE, (int)0);
}

main :: () {
    win: cgl_window;
    cgl_window_init(&win);

    printf("connectionid = %d .. %p\n", win.connection, (void*)&win);
    printf("windowid = %d .. %p\n", win.id, (void*)&win);

    sleep((int)5);
}
